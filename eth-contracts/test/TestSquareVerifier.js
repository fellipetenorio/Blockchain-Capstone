// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');
let p = require("../../zokrates/code/square/proof");
let debug = true;

contract('TestSquareVerifier', accounts => {
    let a0 = accounts[0];
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    describe('Test verification', function () {
        beforeEach(async function () { 
            try {
                this.contract = await verifier.new({from: a0});
            } catch(e) {
                if(debug) console.log(e);
            }
        });
        
        it('verification with correct proof', async function () {   
            let r = await verifyTx(this.contract, p.proof.A, p.proof.A_p, p.proof.B, p.proof.B_p, p.proof.C, p.proof.C_p, p.proof.H, p.proof.K, p.input, a0);
            assert.equal(r, true, 'Proof is not Verified') ;
        });

        it('verification with incorrect proof', async function () { 
            let pC_p = ["", ""];
            let r = await verifyTx(this.contract, p.proof.A, p.proof.A_p, p.proof.B, p.proof.B_p, p.proof.C, pC_p, p.proof.H, p.proof.K, p.input, a0);
            assert.equal(r, false, "Incorrect proof.");
        });
    });
    
}) ;

async function verifyTx(contract, A, A_p, B, B_p, C, C_p, H, K, input, from) {
    return await contract.verifyTx.call(A, A_p, B, B_p, C, C_p, H, K, input, {from: from});
}