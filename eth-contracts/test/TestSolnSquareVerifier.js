// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');
var solnSquareVerifier = artifacts.require('SolnSquareVerifier');
let p = require("../../zokrates/code/square/proof");

// set true to log js exceptions
var debug = false;

contract('TestSolSquareVerifier', accounts => {
    
    let a1 = accounts[0];
    let a2 = accounts[1];
    

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    describe('Test verification', function () {
        beforeEach(async function () { 
            try {
                let verifierContract = await verifier.new({from: a1});
                this.contract = await solnSquareVerifier.new(verifierContract.address, {from: a1});
            } catch(e) {
                if(debug)
                    console.log(e);
            }
        });
        
        //Mint tokens. Also tests addSolution
        it('Successfully mint token', async function () {
            let result = false;
            try {
                await this.contract.verifyMint(
                    a2, 1, p.proof.A, p.proof.A_p, p.proof.B, p.proof.B_p, p.proof.C, 
                    p.proof.C_p, p.proof.H, p.proof.K, p.input, {from: a1});
            } catch(e) {
                result = true;
                if(debug)
                    console.log('verifyMint Error', e);
            }
        
            assert.equal(result, false, 'Error in minting Token') ;
        });

        //Try to mint a token with the same tokenId
        it('Mint token with same solution', async function () { 
            //Mint with solution once
            await this.contract.verifyMint(
                a2, 1, p.proof.A, p.proof.A_p, p.proof.B, p.proof.B_p, p.proof.C, 
                p.proof.C_p, p.proof.H, p.proof.K, p.input, {from: a1});

            //Try miniting again with the same solution
            let revert = false;
            try {
                await this.contract.verifyMint(
                    a2, 1, p.proof.A, p.proof.A_p, p.proof.B, p.proof.B_p, p.proof.C, 
                    p.proof.C_p, p.proof.H, p.proof.K, p.input, {from: a1});
            } catch (e) {
                revert = true;
                if(debug)
                    console.log('verifyMint error', e);
            }

            assert.equal(revert, true, "Can't mint with the same solution");
      });
    });
}) ;

